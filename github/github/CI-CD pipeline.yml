# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Check out the repository code
#     - name: Checkout code
#       uses: actions/checkout@v2

#     # Step 2: Set up Docker Buildx for multi-platform support
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     # Step 3: Log in to Docker Hub using GitHub secrets for credentials
#     - name: Log in to Docker Hub
#       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#     # Step 4: Loop through services to build and push Docker images
#     - name: Build and Push Docker Images
#       run: |
#         services=("crypto_price_service" "transaction_service" "account_service")
#         for service in "${services[@]}"; do
#           echo "Processing $service..."
          
#           # Build Docker image for the service
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/$service:latest ./src/$service
          
#           # Push Docker image to Docker Hub
#           docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
#         done

#     # Step 5: Clean up Docker resources after build to free space
#     - name: Clean up
#       run: |
#         docker system prune -af
version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 503561457120.dkr.ecr.eu-north-1.amazonaws.com
  build:
    commands:
      - echo Building Docker image...
      - docker build -t aws-ijse .
      - docker tag aws-ijse:latest 503561457120.dkr.ecr.eu-north-1.amazonaws.com/aws-ijse:latest
  post_build:
    commands:
      - echo Pushing Docker image to Amazon ECR...
      - docker push 503561457120.dkr.ecr.eu-north-1.amazonaws.com/aws-ijse:latest
      - echo Writing image definitions file...
      - printf '[{"name":"mywebsite","imageUri":"%s"}]' 503561457120.dkr.ecr.eu-north-1.amazonaws.com/aws-ijse:latest > imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json

---
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  type: NodePort
  selector:
    app: web-service-green
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
      nodePort: 30001

---
# Dockerfile for your Node.js service
FROM node:14
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["node", "server.js"]

---
# GitHub Actions CI/CD Pipeline for multi-service Docker build and push

name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx for multi-platform support
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub using GitHub secrets for credentials
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Step 4: Build and Push Docker Images for services
    - name: Build and Push Docker Images
      run: |
        services=("crypto_price_service" "transaction_service" "account_service")
        for service in "${services[@]}"; do
          echo "Processing $service..."
          
          # Build Docker image for the service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/$service:latest ./src/$service
          
          # Push Docker image to Docker Hub
          docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
        done

    # Step 5: Clean up Docker resources after build to free space
    - name: Clean up
      run: |
        docker system prune -af
